// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NoteEditorWired component should render a prefilled form with selected note 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "marginTop": 20,
    }
  }
>
  <TextInput
    allowFontScaling={true}
    defaultValue="a title"
    onChangeText={[Function]}
    placeholder="Title"
  />
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "flex-start",
      }
    }
  >
    <TextInput
      allowFontScaling={true}
      defaultValue="a content"
      multiline={true}
      onChangeText={[Function]}
      placeholder="Content"
    />
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessibilityComponentType="button"
      accessibilityTraits={
        Array [
          "button",
        ]
      }
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
    <View
      accessibilityComponentType="button"
      accessibilityTraits={
        Array [
          "button",
          "disabled",
        ]
      }
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          disabled={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Save
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`NoteEditorWired component should render an empty form without selected note 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "marginTop": 20,
    }
  }
>
  <TextInput
    allowFontScaling={true}
    onChangeText={[Function]}
    placeholder="Title"
  />
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "flex-start",
      }
    }
  >
    <TextInput
      allowFontScaling={true}
      multiline={true}
      onChangeText={[Function]}
      placeholder="Content"
    />
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <View
      accessibilityComponentType="button"
      accessibilityTraits={
        Array [
          "button",
        ]
      }
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
    <View
      accessibilityComponentType="button"
      accessibilityTraits={
        Array [
          "button",
          "disabled",
        ]
      }
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          disabled={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Save
        </Text>
      </View>
    </View>
  </View>
</View>
`;
